import org.junit.Ignore;
import org.junit.Test;
import ua.ks.katyon08.HashTable;

import java.util.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class HashTableTest {

	private final Integer[] simpleArray =
			{ 80, 54, 139, 96, 130, 95, 104, 67, 106, 144 };

	private final Integer[] repeatingArray =
			{ -2, 3, -4, 3, -4, -3, 4, 4, -3, -3, 1,
			-2, 4, -3, 3, -2, -2, -2, -2, -1, -1,
			1, -5, -1, -2, -3, 4, 0, -1, 4, -4,
			3, 3, -1, -1, -5, 2, 1, 3, 3, 1,
			1, -3, -1, -5, -4, 3, 4, 0, 1, -4,
			-1, 0, 1, -5, 2, 3, 1, 1, -5, -3,
			4, -5, -2, -2, 2, 0, 1, 3, -1, -2,
			3, -4, -5, 1, -2, -1, -4, -3, 1, 3,
			-3, 2, 3, 1, -4, 1, -4, 4, 1, -2,
			3, -5, -2, 2, -5, 0, -5, -2, 1, -4,
			4, 0, -2, 1, 0, 2, 3, 2, -4, 2,
			4, 1, 0, -3, 2, 4, 2, -2, -1, -4,
			-1, -5, -2, -1, 4, 1, 1, -4, -5, -3,
			1, -4, -5, -3, -1, 4, -5, 1, -5, -5,
			-1, 2, 0, 4, 3, 4, -5, -1, -3, -4,
			-2, -4, -5, -1, 2, 3, 0, 1, 2, -2,
			4, -2, -4, 2, -3, 4, 1, -4, -5, 3,
			-1, -1, -5, -4, 1, -3, -5, -2, 3, -3,
			-1, 0, 1, -2, -3, 2, 1, 4, -1, -2,
			-4, 2, -1, -5, 2, 4, -3, 1, 4, 4,
			2, -5, 1, -4, 0, -3, 2, -1, -1, -2,
			-4, -4, 4, 4, -5, -4, 3, 1, -3, 2,
			1, -5, 4, 1, -5, -3, 4, -1, 0, 1,
			0, 4, -3, 4, -2, -2, 0, -1, -4, 4,
			3, -3, -1, 2, 0, -4, -5, 3, -5, -2,
			-5, -2, 2, -2, 4, 4, 1, -4, -5, 3,
			0, 1, 0, 0, -2, 3, -3, 0, 3, 3,
			-4, 3, 4, -2, 2, -1, 1, -2, 4, 2,
			1, -2, -3, 0, -5, 2, -5, -1, -5, 3,
			-5, -4, 1, 1, -2, -1, -4, 3, -2, -1,
			4, 1, -1, -1, 4, 2, -2, 1, -4, 4,
			-1, -3, -3, 4, 1, 2, 1, 1, 3, 0,
			-4, 4, 4, -5, 4, -5, -3, 2, -4, -1,
			3, -5, 1, 3, 3, 4, 4, -5, 3, -2,
			4, 4, -2, 1, -3, -3, 1, 1, 3, -2,
			-4, -3, -4, -3, -5, -2, 1, -3, 0, -1,
			-2, 3, -2, 4, 2, -1, 3, 0, 1, -1,
			0, 3, 2, 0, -2, -3, -2, 3, 1, 0,
			1, 2, -3, 2, -2, 1, 4, 4, -1, -1,
			-3, 1, -5, 0, -1, 0, -4, -3, -2, 0,
			-5, 3, 4, 2, -4, 0, 2, 1, -5, -4,
			-2, -3, 0, -3, 4, 1, 1, 1, 3, 0,
			-2, 4, -1, -2, 0, 4, -1, 2, -5, 1,
			3, -5, -2, 1, -3, -5, 2, -2, 1, 1,
			-4, -4, -4, 2, -2, 3, 4, -5, -1, -4,
			0, 4, -2, -3, 4, 2, -4, 2, -2, 3,
			2, -5, 3, -1, 4, 3, 1, -3, -4, 2,
			4, 2, 0, 1, -3, -4, 2, 0, -3, -1,
			-4, 3, -3, 4, 4, 4, 2, -5, -3, -4,
			0, 1, 1, -3, 2, -1, -3, 1, -2, -4,
			-2, 0, 1, 3, -3, 4, -5, -5, 2, 2,
			4, -5, 2, 4, 4, 4, -2, -4, -1, -1,
			-2, -5, 1, 2, -4, 3, -3, 2, 1, 4,
			4, 0, -1, -5, -5, 4, -2, 2, 2, 2,
			2, -5, 2, 3, 3, -1, -2, -3, -2, 4,
			-3, -4, 0, -3, 0, -3, 4, -1, -3, -4,
			2, 0, -4, 1, 3, 3, -1, -2, -2, 4,
			-1, 1, -5, -5, -5, 2, -1, 1, 1, 0,
			0, 0, -1, -2, -3, 2, -3, 3, 1, -1,
			1, -1, 0, -5, -2, 3, -2, 3, -4, -4,
			-2, -1, 4, 2, 3, -1, 4, 1, 4, 1,
			3, 1, 2, -3, 1, -3, -2, -3, 3, -3,
			1, 1, 2, 2, -1, -4, 4, -4, -3, -3,
			1, 4, 4, 4, 4, -4, -2, -2, 4, 3,
			2, 0, -2, -4, 1, -1, -4, -3, 0, -3,
			-3, -2, 0, -1, -1, -4, -5, -4, 0, -1,
			4, -4, -2, -2, -1, 3, -2, -5, -2, 0,
			-2, 2, 3, -2, 4, -1, -2, -5, -3, -1,
			1, -1, 3, -5, 2, -5, -3, -5, -2, 4,
			-5, 0, -4, -4, -4, 3, -2, -1, -5, 0,
			0, 0, 3, 0, -4, 4, 4, 3, -1, -5,
			1, -5, 0, 4, -5, 0, 2, -2, 0, -2,
			2, 1, -5, 1, 3, 3, 1, 4, -3, 2,
			-2, 4, -1, -2, -5, 2, -5, -4, -2, -3,
			0, -2, 1, -4, 0, -1, 0, -5, -5, 0,
			1, 3, -4, 0, 4, 0, -3, 3, 1, -3,
			1, 1, -3, -3, -2, 1, 3, -1, -2, -3,
			4, -1, -1, -4, -3, 3, -3, 1, 4, 3,
			0, 0, 3, 3, 4, 0, -4, 0, -1, 4,
			2, -3, -3, -4, -5, -3, -1, 3, -1, -5,
			0, -5, -2, 1, 0, 1, 0, -4, 2, -4,
			-5, 3, 1, -5, 0, 1, 2, -3, -5, -2,
			-5, -5, 0, 4, 2, 4, 0, 0, -5, 1,
			3, -3, 0, -5, 4, 4, 0, -5, -5, -5,
			2, 4, -5, -4, 2, 3, -3, -1, 1, -1,
			4, 2, -1, 1, 2, -1, -2, -2, 3, 3,
			-1, 3, 4, 1, 4, -2, 3, -5, -1, 0,
			-1, -3, 1, -4, 2, -3, 1, -3, -3, -3,
			2, -3, -4, -5, -1, 3, 4, 1, -3, -3,
			-4, 3, 3, -3, 1, -3, 1, -1, -1, 4,
			3, -2, -5, -1, -4, -5, 1, 1, 1, 0,
			-5, 2, -3, 1, -3, 1, 3, 2, 1, -2,
			0, -2, -2, 4, -3, -1, 0, 1, 4, -5,
			1, 3, -1, -3, 3, -3, -2, 2, -2, -4,
			1, 2, -2, 3, -1, -5, -4, 0, -2, 0,
			0, -4, -5, -2, 4, -2, 1, -5, -2, -3,
			-4, -3, -4, 4, -5, -3, 2, 4, -2, 1,
			2, -2, 0, -1, -5, 4, -5, -4, -2, -1,
			-5, -1, 3, -2, 0, -4, 4, -1, 3, -1,
			-2, 1, -2, 2, -5, -4, 0, -3, -3 };

	private final Integer[] maxIntArray =
			{ 14995, -5711, -8063, 10233, 8968, 14854, -7947, 720, 11357, -7643, 1793,
			7265, 4286, -7867, 9477, 6302, -4939, 1092, -12192, 6510, -700,
			-1808, 6044, -13070, -9695, 4738, -7084, -6698, 9343, 7829, 10178,
			-13981, -2779, -2203, 13721, -10926, -1011, -4270, 4572, 3979, -4661,
			-349, 7018, -9397, 14679, 5159, -713, -12060, 14266, -6138, 9432,
			-3090, 14977, -9513, 954, 7083, 11217, 5611, -12593, 13577, -6409,
			4470, -2970, -11424, 1610, 6750, -13834, -10229, -5408, 3131, -2521,
			4579, -8950, 10383, 3484, 13863, -12804, 13423, -12415, 5752, -3139,
			-13937, 5710, 13921, -6121, 8844, -3275, 5012, 5612, -2365, 1934,
			-2418, -12923, 11951, 9083, 3789, 2952, -7152, -182, -280, 12566,
			-12602, 14264, 4492, -1859, 12332, -1332, -4488, -3967, 18, -4633,
			14254, 10034, 4211, 11558, -7094, 90, -4506, 6529, -3506, 13749,
			-14225, 11524, -10020, 3949, -10843, -8489, 5565, 7538, 3551, 14763,
			-4146, 8498, 1863, -12956, 14570, 13594, 9920, 782, -6254, 1993,
			11860, -1027, 6442, 9517, -13514, 2469, -12083, 12813, -5881, -4222,
			9280, 9362, 2516, 5685, 820, 3827, 1372, 13260, 7125, 1372,
			1902, 11373, -5169, -1495, -14911, 14639, 14353, 724, 10174, -12508,
			10330, -55, -12904, 13815, 14367, 979, -3620, -8754, -12018, 261,
			6739, -4052, 9645, -6617, -2796, 8230, 9436, -1766, -138, -9425,
			-14887, 9450, -8652, 1123, 9938, -8385, 5833, 2124, 7060, -14272,
			14554, -10587, 114, -4843, 9619, 6040, -6126, 5542, 9545, -14410,
			-14654, -9354, -12385, -9213, 8568, 7062, -9596, 12522, 6806, -7641,
			-9446, -3339, -14868, -11808, -10878, -7055, 14360, -3352, 7010, -4559,
			12536, -5344, -3304, 5458, 640, -9536, -13592, -8058, 10167, 8172,
			-9871, -5856, -8740, 13043, -9026, 3898, 422, -11932, 9545, -362,
			-7431, 3022, -13686, -6352, 10788, -5518, -9011, -13060, 8471, 2455,
			10625, 2065, -10159, -4902, -11284, -9039, 1192, 5967, -5188, -12124,
			-7998, 7352, 13960, -14848, 3728, -11935, 4005, 10599, -3061, -7546,
			-4075, -3459, 12262, -4382, -5318, 12341, -2205, 3269, -8967, -10025,
			12673, -864, -4647, -7857, -12077, 1936, 14378, -14923, 44, -4091,
			4290, -13707, 7655, -6706, -670, 8987, -9085, 13939, -9160, 10205,
			-4677, -10401, 13966, 13524, -10653, 6328, 13679, 1687, -14754, 14476,
			-8278, -14058, 13181, -215, -1393, -6191, -1358, -13000, -122, -10941,
			-1534, -4617, -5425, 13102, -12247, 963, -13484, 10708, -14312, 4159,
			-2662, -11057, -7415, 2899, -5482, 6126, 1923, 14243, -467, -14100,
			1001, -582, 916, -12098, -9220, -10444, -4970, 10025, 449, 11717,
			548, -9826, 1149, 9625, 13702, -14396, 11517, 9737, 7600, 4480,
			-1469, -3113, 7680, -1166, 3210, -6442, 9475, 8207, 6922, -7592,
			-10345, -4921, 5175, 10181, -10853, -2413, -14892, -14602, 13939, -3219,
			-2619, 8379, -11992, 4731, -11326, 6783, 7052, 6473, 2823, -8330,
			-9557, -7262, 648, 527, -10819, 4363, 11154, 6476, 5976, -7668,
			-11811, -13109, -3278, 7003, -4003, 3905, -5213, -13209, 9336, -1614,
			14137, 11871, 13986, 4287, 14998, -12435, -7932, 5164, -92, 11842,
			10491, 845, -5159, -1970, 1788, 1052, -1211, -6644, -2123, -5350,
			-5384, 11048, -2561, 2064, 6113, 3374, -7312, 3680, -12399, -11983,
			-4228, -5859, 10381, 1508, 11100, -909, -14878, -9240, -7081, 2069,
			7251, 5427, -8084, -4079, -8113, -14983, 3794, -6398, 8750, 12010,
			1062, 8370, 11721, -12504, 3572, 6746, 14457, 5458, 8129, -10105,
			4775, -5838, -8251, 10315, -6429, 5632, 10262, 13261, -5952, -11295,
			-14417, -13843, -12803, -1360, 8351, -807, -13537, 9862, 14286, -12267,
			-13351, 7769, 10443, -5174, -6146, 9615, -8656, -9922, -5635, -1347,
			9383, -11941, 2634, -8880, -10618, 14863, -8226, 9159, 8037, -1328,
			-5323, -2085, 6833, 10585, -91, -6084, 825, 1526, -2594, -11286,
			10533, 13288, -13475, -7299, 8646, -1147, 5578, 5441, 5688, 7311,
			1906, -2607, -2828, 5311, 3407, -6802, 12659, 14222, 13906, -9699,
			-5491, -1312, -5421, -10453, 1119, 2381, -10913, -12195, -10661, 13949,
			6337, -1832, -11830, 5328, 14347, -2567, -2612, -13209, 1091, -7053,
			-5681, 50, -5013, -5613, 14974, -11993, -14776, 369, 6769, -5972,
			-8332, 10101, 9794, -12463, 6591, 8436, 9760, -12003, 816, -2858,
			10140, -5005, 5914, 8468, 12689, -7488, 6202, -3469, 2464, 548,
			-4420, 24, 12473, -4661, -115, -2377, -2105, 8807, 9627, 11996,
			11922, -13092, 8600, -12715, -14328, 6471, 4382, -8694, 4789, -11252,
			12284, -4070, 13550, -4374, -4050, 5043, -5986, 765, -1604, 14430,
			-14280, -13343, -14951, -1804, -9477, 12845, 9499, -319, 467, 4019,
			-7574, -188, 2124, 8483, 4689, 5264, -8414, 2871, 8466, -12270,
			12148, 13374, 5158, -6450, -3898, 6280, 9762, -8983, -8858, -421,
			12837, -835, 4054, 9184, 4798, 2701, -6408, -8035, -1062, 1301,
			5864, -11440, -2390, -3700, -1437, -13340, -10956, 6217, 2117, 10595,
			5312, 12143, 10480, 3193, -6701, 1783, -6632, 672, -6216, 8872,
			14332, -3699, -1190, -3338, -2705, 3863, 3790, 9124, -412, -14993,
			-3523, -13689, -1384, 12112, 8000, 3272, 1465, 9141, -4716, 2869,
			2469, -1999, 1485, -9498, -7091, 11663, 12422, -2249, -8456, -8410,
			5798, 13094, 11140, 4009, 12030, -14485, -1481, -11911, -14209, -6289,
			14643, -2409, -9095, -1894, -5704, 5609, 6495, -11315, -2476, -1192,
			7830, -1847, -13626, 13428, -885, -4838, 14432, 1957, -4012, 4739,
			4330, -11953, -11010, -14265, -14718, 9120, 9974, 5985, 11346, -8934,
			980, -10847, 3450, -12856, -13998, 4788, -11076, 9854, -4294, -10130,
			8487, 7329, -2739, -10137, -10821, -6240, 8992, -6545, -5013, 3534,
			4800, 12575, 2209, -995, 1926, -8114, -10533, 11657, -14570, 12316,
			12515, 11710, -1199, 8767, 12284, -10698, 14235, -4281, -5480, -10125,
			-9929, -14048, -9145, -14299, -5314, -5852, 14425, -3879, -1250, 11914,
			853, -4225, 1887, -7761, -8510, 6582, 11649, -3681, 11058, 6310,
			-11919, 7248, 11439, -5063, -7766, -13844, 2461, -13001, 3944, 521,
			11679, -340, 12696, -490, 7558, 10296, 9772, 14932, -11820, 3332,
			-12261, 8654, -9105, 6972, 9332, -11721, 8577, 14061, -13662, -10785,
			-1124, -7621, 7147, -2719, -14150, 14639, 2483, 13948, -686, 6637,
			-7090, -14164, 6407, -5618, 11043, -5404, -8310, -7794, -13972, -11605,
			7808, 5331, -11255, 6816, -10737, -3144, 7684, 13563, -4239, 5142,
			-9841, -12607, 8363, -2770, 13817, 9187, 11720, -3883, 12256, 1924,
			-11362, -4932, -11759, 8053, -13326, 3947, -8069, -593, 3159, -14262,
			-6735, 4460, -8671, 6252, 9230, -5597, 11992, 7064, -1870, -3570,
			-11400, 6245, 1307, -3351, -11163, -1263, 3791, -10966, 2108, -10338,
			-11483, -8617, 7973, -3638, -11948, -6072, -3931, 14041, 6195, -3622,
			12799, -8847, -800, -3139, 10138, 8146, 11996, 7883, -1714, -13920,
			-9917, 11942, -14248, -10898, 6841, -4996, 9917, -10631, -7552, -1063,
			14747, -5458, 311, 6074, -181, 11257, 1356, -6487, -2829, -12453,
			-10847, 10458, -11528, 70, -12708, -2495, -256, -3031, -3559, 10429,
			-6987, 355, -7653, 6469, -13242, -3595, -8465, 574, -13608, 1017,
			-9999, -4746, 3017, 5897, -12184, 12320, -12203, 8173, 5964, 10860,
			-9999, -11947, 5176, 7506, 4149, -12049, 5610, 1307, 13735 };

	private final Integer[] regularArray =
			{ 127, 81, 134, 54, 118, 105, 149, 122, 130, 122, 79, 148, 75, 121, 101, 94,
			98, 106, 138, 106, 139, 104, 113, 90, 91, 69, 88, 137, 93, 121, 97,
			116, 132, 66, 124, 76, 110, 140, 119, 115, 104, 79, 143, 122, 107, 149,
			134, 125, 59, 112, 54, 99, 119, 78, 86, 50, 64, 115, 124, 119, 147,
			56, 96, 86, 66, 73, 71, 124, 91, 138, 68, 71, 130, 63, 68, 68,
			124, 62, 148, 145, 144, 62, 110, 65, 146, 92, 136, 83, 127, 83, 60,
			95, 109, 90, 62, 136, 59, 122, 107, 61, 141, 142, 108, 67, 54, 67,
			123, 83, 119, 109, 90, 146, 74, 108, 135, 113, 107, 72, 95, 51, 91,
			63, 120, 138, 74, 61, 113, 117, 63, 110, 136, 121, 120, 142, 96, 64,
			147, 62, 64, 95, 137, 61, 57, 144, 141, 90, 80, 142, 92, 144, 128,
			145, 137, 101, 103, 115, 124, 78, 115, 102, 85, 120, 77, 148, 115, 76,
			94, 68, 147, 68, 115, 67, 128, 120, 139, 131, 51, 109, 147, 113, 100,
			93, 53, 105, 91, 125, 54, 107, 106, 61, 67, 85, 65, 140, 59, 143,
			96, 141, 128, 129, 50, 89, 99, 115, 113, 112, 70, 63, 50, 80, 61,
			149, 90, 79, 56, 131, 132, 57, 117, 105, 103, 53, 109, 87, 124, 103,
			130, 86, 146, 64, 97, 145, 144, 94, 65, 76, 131, 66, 136, 128, 102,
			51, 69, 71, 72, 73, 96, 71, 114, 103, 67, 70, 116, 120, 113, 120,
			62, 144, 121, 84, 72, 123, 81, 118, 78, 70, 140, 126, 128, 145, 91,
			94, 58, 142, 100, 78, 80, 117, 137, 113, 121, 111, 81, 61, 122, 108,
			116, 64, 81, 103, 141, 94, 103, 128, 120, 70, 76, 81, 106, 56 };

	@Test
	public void hashTableDefaultTest() {
		HashTable<Integer, String> hashTable = new HashTable<Integer, String>();
		assertTrue(hashTable != null);
	}

	@Test
	public void hashTableFloatIntTest() {
		HashTable<Integer, String> hashTable = new HashTable<Integer, String>(1f, 10);
		assertTrue(hashTable != null);
	}

	@Test
	public void hashTableMapTest() {
		Map<Integer, String> map = new java.util.HashMap<>();
		map.put(10, String.valueOf(10));
		HashTable<Integer, String> hashTable = new HashTable<Integer, String>(map);
		assertTrue(hashTable.get(10).equals(String.valueOf(10)));
	}

	@Test
	public void putTest() {
		HashTable<Integer, String> hashTable = new HashTable<Integer, String>();
		String s = "ten";
		hashTable.put(10, s);
		assertEquals(hashTable.get(10), s);
	}

	@Test
	public void putAllTest1() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = simpleArray, checkArray = new Integer[array.length];
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		for (int i = 0; i < array.length; i++) {
			checkArray[i] = hashTable.get(i);
		}
		assertEquals(array, checkArray);

	}

	@Test
	public void putAllTest2() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = regularArray, checkArray = new Integer[array.length];
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		for (int i = 0; i < array.length; i++) {
			checkArray[i] = hashTable.get(i);
		}
		assertEquals(array, checkArray);

	}

	@Test
	public void putAllTest3() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = repeatingArray, checkArray = new Integer[array.length];
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		for (int i = 0; i < array.length; i++) {
			checkArray[i] = hashTable.get(i);
		}
		assertEquals(array, checkArray);

	}

	@Test
	public void putAllTest4() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = maxIntArray.clone(), checkArray = new Integer[array.length];
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		for (int i = 0; i < array.length; i++) {
			checkArray[i] = hashTable.get(i);
		}
		assertEquals(array, checkArray);

	}

	@Test
	public void clearTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = maxIntArray.clone();
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		hashTable.clear();
		assertEquals(hashTable.size(), 0);
	}

	@Ignore
	public void cloneTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		for (int i = 0; i < maxIntArray.length; i++) {
			hashTable.put(i, maxIntArray[i]);
		}
		assertEquals(hashTable, hashTable.clone());
	}

	@Test
	public void containTest() {
		boolean right = true;
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		for (int i = 0; i < maxIntArray.length; i++) {
			hashTable.put(i, maxIntArray[i]);
			right = right && hashTable.contains(maxIntArray[i]) &&
					hashTable.containsKey(i) &&
					hashTable.containsValue(maxIntArray[i]);
		}
		assertTrue(right);
	}

	@Test
	public void equalsTest() {
		HashTable<Integer, Integer> hashTable1 = new HashTable<Integer, Integer>(), hashTable2 = new HashTable<Integer, Integer>();
		for (int i = 0; i < maxIntArray.length; i++) {
			hashTable1.put(i, maxIntArray[i]);
			hashTable2.put(i, maxIntArray[i]);
		}
		assertEquals(hashTable1, hashTable2);
	}

	@Test
	public void getTest() {
		HashTable<Integer, Integer> hashTable1 = new HashTable<Integer, Integer>(), hashTable2 = new HashTable<Integer, Integer>();
		for (int i = 0; i < maxIntArray.length; i++) {
			hashTable1.put(i, maxIntArray[i]);
		}
		for (int i = 0; i < hashTable1.size(); i++) {
			hashTable2.put(i, hashTable1.get(i));
		}
		assertEquals(hashTable1, hashTable2);
	}

	@Test
	public void isEmptyTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = maxIntArray;
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		for (int i = 0; 0 != hashTable.size(); i++) {
			hashTable.remove(i);
		}
		assertTrue(hashTable.isEmpty());
	}

	@Test
	public void keySetTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = maxIntArray;
		Set<Integer> keySet = new HashSet<Integer>();
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
			keySet.add(i);
		}
		assertEquals(keySet, hashTable.keySet());
	}

	@Test
	public void iteratorTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Integer[] array = regularArray;
		for (int i = 0; i < array.length; i++) {
			hashTable.put(i, array[i]);
		}
		Iterator<Integer> iterator = (Iterator<Integer>) hashTable.keyIterator();
		while (iterator.hasNext()) {
			iterator.next();
			iterator.remove();
		}
		assertEquals(hashTable.size(), 0);
	}

	@Test
	public void removeAllKeysTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Map<Integer, Integer> map = new java.util.HashMap<>();
		Integer[] array = regularArray;
		for (int i = 0; i < array.length; i++) {
			map.put(array[i], array[i]);
		}
		hashTable.putAll(map);
		hashTable.removeAllKeys(map.keySet());
		assertTrue(hashTable.size() == 0);
	}

	@Ignore
	public void removeAllValuesTest() {
		HashTable<Integer, Integer> hashTable = new HashTable<Integer, Integer>();
		Map<Integer, Integer> map = new java.util.HashMap<>();
		Integer[] array = simpleArray;
		for (int i = 0; i < array.length; i++) {
			map.put(array[i], array[i]);
		}
		hashTable.putAll(map);
		hashTable.removeAllValues(map.values());
		assertTrue(hashTable.size() == 0);
	}
}
